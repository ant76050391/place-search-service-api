plugins {
    id 'org.springframework.boot' version '2.7.6'
    id 'io.spring.dependency-management' version '1.1.0'
    id "com.gorylenko.gradle-git-properties" version "2.4.1"
    id "com.diffplug.gradle.spotless" version "3.28.1"
    id 'java'
}

apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.gorylenko.gradle-git-properties'

group = 'org.example'
version = '0.0.1-SNAPSHOT'

sourceCompatibility = '11'
targetCompatibility = '11'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    implementation 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    implementation 'org.springframework.boot:spring-boot-starter-data-redis-reactive'

    implementation 'io.projectreactor.addons:reactor-extra:3.4.8'
    implementation 'io.projectreactor:reactor-tools:3.4.24'
    testImplementation 'io.projectreactor:reactor-test'

    implementation 'io.github.resilience4j:resilience4j-spring-boot2'
    implementation 'io.github.resilience4j:resilience4j-reactor'

    implementation 'org.springframework.boot:spring-boot-starter-logging'
    implementation 'net.logstash.logback:logstash-logback-encoder:7.2'

    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'com.github.ben-manes.caffeine:caffeine:3.1.2'

    implementation 'info.debatty:java-string-similarity:2.0.0'

    implementation 'org.modelmapper:modelmapper:3.1.1'

    runtimeOnly 'org.projectlombok:lombok'
    implementation 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testRuntimeOnly 'org.projectlombok:lombok'
    testImplementation 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.9.0'

    implementation 'io.projectreactor.tools:blockhound:1.0.6.RELEASE'

    implementation 'io.netty:netty-resolver-dns-native-macos:4.1.86.Final:osx-aarch_64'
}

dependencyManagement {
    imports {
        mavenBom 'org.springframework.cloud:spring-cloud-dependencies:2021.0.2'
    }
}

compileJava.mustRunAfter clean

test {
    useJUnitPlatform()
}

jar {
    enabled = false
}

gitProperties {
    keys = ['git.branch']
}

spotless {
    java {
        // 사용하지 않는 import 제거
        removeUnusedImports()
        // 공백 제거
        trimTrailingWhitespace()
        // Tab으로 처리(파라미터에 숫자를 넣으면 )
        indentWithTabs()
        // 끝부분 NewLine 처리
        endWithNewline()
        /**
         * import 순서도 정의가 가능하다.
         */
        importOrder('java', 'javax', 'org', 'com', '')
        /**
         * Google Java Format을 쉽게 적용할 수 있다.
         */
        googleJavaFormat()
    }

    /**
     * 특정 파일에 대해 적용할 수 있다.
     */
    format 'misc', {
        target '**/*.gradle', '**/*.md', '**/.gitignore'

        trimTrailingWhitespace()
        indentWithTabs()
        endWithNewline()
    }
}

bootRun {
    if (project.hasProperty('jvmArgs')) {
        jvmArgs = (project.jvmArgs.split("\\s+") as List)
    } else {
        jvmArgs = ["-Dhealthcheck.filepath=alive.html\n" +
                           "-Dio.netty.leakDetection.level=advanced\n" +
                           "-Djava.net.preferIPv4Stack=true\n" +
                           "-Dreactor.netty.http.server.accessLogEnabled=false\n" +
                           "-Xms2g\n" +
                           "-Xmx2g\n" +
                           "-Dexternal.api.dryRun=false"]
    }
}